buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }

    }
    dependencies {
        //classpath 'com.android.tools.build:gradle:0+'
        // https://github.com/JakeWharton/hugo
        //classpath 'com.jakewharton.hugo:hugo-plugin:1.0.+'
        classpath 'io.fabric.tools:gradle:1.14.4'
    }
}


repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
//apply plugin: 'hugo'

// Load application build configuration.
def Properties buildProperties = new Properties()
def buildProdFile = new File('build_prod.properties')
if (buildProdFile.canRead()) {
    buildProperties.load(new FileInputStream(buildProdFile))
} else {
    buildProdFile = new File('build_default.properties')
    buildProperties.load(new FileInputStream(buildProdFile))
}

dependencies {
    compile 'com.google.android.gms:play-services-base:7.8.0'
    compile 'com.google.android.gms:play-services-maps:7.8.0'
    compile 'com.google.android.gms:play-services-location:7.8.0'
    compile 'com.google.android.gms:play-services-analytics:7.8.0'
    compile 'com.google.android.gms:play-services-ads:7.8.0'
    compile 'com.android.support:recyclerview-v7:22.2.1'
    compile 'com.android.support:cardview-v7:22.2.1'
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:support-v4:22.2.1'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.yqritc:recyclerview-multiple-viewtypes-adapter:1.1.0'
    compile files('libs/katalysator_android_sdk.jar')
    compile files('libs/nmdp_speech_kit.jar')
    compile files('libs/widespace-sdk-4.5.0-05d6dac.jar')
    compile('com.crashlytics.sdk.android:crashlytics:2.5.0@aar') {
        transitive = true;
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 22
        versionName "2.12.7"
        versionCode 148

        buildConfigField "boolean", "APP_IS_ADS_ENABLED", buildProperties['IS_ADS_ENABLED']
        buildConfigField "String", "APP_WIDESPACE_SID", buildProperties['WIDESPACE_SID']
        buildConfigField "String", "APP_KATALYST_API_KEY", buildProperties['KATALYST_API_KEY']
        buildConfigField "String", "APP_STHLMTRAVELING_API_KEY", buildProperties['STHLMTRAVELING_API_KEY']
        buildConfigField "String", "APP_ANALYTICS_PROPERTY_KEY", buildProperties['ANALYTICS_PROPERTY_KEY']
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
        defaultFlavor {
            proguardFile 'proguard-rules.txt'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    applicationVariants.all { variant ->
        def packageName = "com.markupartist.sthlmtraveling"
        def versionCode = defaultConfig.versionCode
        def versionName = defaultConfig.versionName
        def versionType = variant.name

        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def version = versionName + "." + versionCode
                def newFilename = packageName + "-" + version + "-" + versionType + ".apk"
                output.outputFile = new File(outputFile.parent, newFilename)
            }
        }

    }

    packagingOptions {
        exclude 'META-INF/pom.properties'
        exclude 'META-INF/pom.xml'
    }
}


// Fetch properties for signing
def Properties props = new Properties()
def propFile = new File('signing.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
