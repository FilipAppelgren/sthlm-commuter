buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://download.crashlytics.com/maven' }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.10.+'
        // https://github.com/JakeWharton/hugo
        //classpath 'com.jakewharton.hugo:hugo-plugin:1.0.+'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'

    }
}

apply plugin: 'android'
apply plugin: 'crashlytics'
//apply plugin: 'hugo'

repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }

}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
        versionName "2.8.0"
        versionCode 108
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            runProguard true
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
        defaultFlavor {
            proguardFile 'proguard-rules.txt'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    applicationVariants.all { variant ->
        def file = variant.outputFile
        variant.outputFile = new File(
                file.parent, file.name.replace(".apk",
                "-" + defaultConfig.versionName + "." +defaultConfig.versionCode + ".apk"))
    }
}

dependencies {
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile 'com.android.support:support-v4:19.1.0'
    compile 'com.google.android.gms:play-services:4.0.+'
    //compile project(':ViewPageIndicator')
    compile 'com.squareup.okhttp:okhttp:1.3.0'
    compile files('libs/FlurryAgent.jar')
    compile 'com.crashlytics.android:crashlytics:1.+'

}

// Fetch properties for signing
def Properties props = new Properties()
def propFile = new File('signing.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}